#include <vector>

#include <boost/shared_ptr.hpp>
#include <gflags/gflags.h>
#include <glog/logging.h>

#include <cmath>

#include "caffe/blob.hpp"
#include "caffe/common.hpp"
#include "caffe/layers/TPS_BeforeT.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe{
    template <typename Dtype>
    void CToParaLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,
        const vector<Blob<Dtype>*>& top){
          string prefix = "\t\tCToPara Layer:: LayerSetUp: \t";
          //if(global_debug_) std::cout<<prefix<<"Starting!"<<std::endl;
          
          if(this->layer_param_.st_cparam().transform_type() == "TPS"){
            transform_type_ = "TPS";
          }
          else {
            CHECK(false) << prefix << "Transformation type only supports TPS now!" << std::endl;
          }
          
          
          if(this->layer_param_.st_cparam().sampler_type() == "bilinear"){
            sampler_type_ = "bilinear";
          }
          else{
            CHECK(false) << prefix << "Sampler type only supports bilinear now!" << std::endl;
          }
        
//Create Room for the constant matrix A (19 * 19)
        vector<int> shape_a(2);
        shape_a[0] = 19;
        shape_a[1] = 19;
        constant_a.Reshape(shape_a);
//Initialize 
        
        Dtype* a = constant_a.mutable_cpu_data();
        float a_vector[19*19] = {-0.552747934337447,	0.307284054690829,	0.30728405469083,	-0.552747934337448,	0.307284054690829,	0.188179824955789,	0.18817982495579,	0.307284054690828,	0.307284054690831,	0.188179824955788,	0.188179824955787,	0.307284054690832,	-0.552747934337448,	0.307284054690829,	0.307284054690833,	-0.552747934337451,	3.11886604949158,	-1.48827439439006E-15,	-1.48697846732017E-15,	-0.338151158712178,	0.173217039552964,	-0.173217039552964,	0.338151158712177,	-0.0201477303705673,	0.151679952592266,	-0.151679952592266,	0.0201477303705698,	-0.0201477303705713,	0.151679952592267,	-0.151679952592265,	0.0201477303705659,	-0.338151158712176,	0.173217039552963,	-0.173217039552966,	0.338151158712179,	-3.05944361769325E-15,	4.40304562245525,	1.81776443022495E-15,	-0.338151158712178,	-0.0201477303705687,	-0.020147730370568,	-0.338151158712177,	0.173217039552964,	0.151679952592267,	0.151679952592264,	0.173217039552965,	-0.173217039552965,	-0.151679952592266,	-0.151679952592264,	-0.173217039552964,	0.338151158712179,	0.0201477303705667,	0.0201477303705677,	0.338151158712178,	-2.3120873713781E-15,	-1.12692335522532E-15,	4.40304562245525,	0.535766042624733,	-0.47402237081109,	0.0859820654718773,	-0.0234903206015876,	-0.474022370811089,	0.193336647487863,	0.0349234472173671,	0.0197900092957942,	0.085982065471877,	0.0349234472173676,	-0.0355396056120242,	-0.00612777611408751,	-0.0234903206015875,	0.0197900092957942,	-0.00612777611408793,	0.0323268065828805,	-0.552747934337448,	-0.338151158712177,	-0.338151158712177,	-0.47402237081109,	1.09630480524377,	-0.611488509864058,	0.0859820654718764,	0.134634695056482,	-0.477424842897478,	0.0945615382726951,	0.0389120218906062,	0.0389120218906046,	0.0763559743451608,	0.0291833019092977,	-0.016146261721981,	0.0197900092957948,	-0.0312440230695054,	0.00181735110191239,	-0.00612777611408749,	0.30728405469083,	0.173217039552963,	-0.0201477303705681,	0.0859820654718772,	-0.611488509864058,	1.09630480524377,	-0.47402237081109,	0.0389120218906051,	0.0945615382726952,	-0.477424842897478,	0.134634695056481,	-0.0161462617219797,	0.0291833019092976,	0.0763559743451608,	0.0389120218906051,	-0.00612777611408819,	0.00181735110191191,	-0.0312440230695048,	0.0197900092957948,	0.30728405469083,	-0.173217039552963,	-0.0201477303705688,	-0.0234903206015874,	0.0859820654718772,	-0.47402237081109,	0.535766042624733,	0.0197900092957944,	0.0349234472173671,	0.193336647487864,	-0.47402237081109,	-0.00612777611408782,	-0.0355396056120245,	0.0349234472173673,	0.0859820654718777,	0.0323268065828802,	-0.00612777611408687,	0.0197900092957939,	-0.0234903206015879,	-0.552747934337448,	0.338151158712177,	-0.338151158712178,	-0.474022370811089,	0.134634695056482,	0.038912021890605,	0.0197900092957942,	1.09630480524377,	-0.477424842897478,	0.0763559743451611,	-0.0312440230695051,	-0.611488509864058,	0.0945615382726956,	0.0291833019092968,	0.0018173511019127,	0.0859820654718764,	0.0389120218906061,	-0.0161462617219805,	-0.00612777611408774,	0.30728405469083,	-0.0201477303705683,	0.173217039552964,	0.193336647487864,	-0.477424842897479,	0.0945615382726951,	0.0349234472173679,	-0.477424842897478,	1.35779167644369,	-0.542592880902585,	0.07635597434516,	0.0945615382726956,	-0.542592880902586,	0.0543982057915569,	0.0291833019092978,	0.0349234472173666,	0.0763559743451621,	0.0291833019092972,	-0.0355396056120246,	0.188179824955789,	0.151679952592267,	0.151679952592265,	0.0349234472173668,	0.0945615382726962,	-0.477424842897478,	0.193336647487863,	0.0763559743451616,	-0.542592880902586,	1.35779167644369,	-0.477424842897478,	0.0291833019092965,	0.054398205791558,	-0.542592880902586,	0.0945615382726959,	-0.0355396056120235,	0.0291833019092964,	0.0763559743451613,	0.0349234472173669,	0.18817982495579,	-0.151679952592267,	0.151679952592267,	0.0197900092957942,	0.038912021890605,	0.134634695056482,	-0.47402237081109,	-0.0312440230695054,	0.0763559743451623,	-0.47742484289748,	1.09630480524377,	0.00181735110191225,	0.0291833019092965,	0.0945615382726963,	-0.611488509864059,	-0.00612777611408727,	-0.0161462617219808,	0.0389120218906056,	0.0859820654718774,	0.307284054690829,	0.0201477303705689,	0.173217039552964,	0.0859820654718769,	0.038912021890605,	-0.0161462617219801,	-0.00612777611408748,	-0.611488509864058,	0.0945615382726951,	0.0291833019092975,	0.00181735110191164,	1.09630480524377,	-0.477424842897479,	0.0763559743451616,	-0.031244023069505,	-0.474022370811089,	0.13463469505648,	0.0389120218906062,	0.0197900092957942,	0.307284054690829,	-0.0201477303705691,	-0.173217039552964,	0.0349234472173671,	0.0763559743451626,	0.0291833019092961,	-0.0355396056120242,	0.0945615382726947,	-0.542592880902586,	0.0543982057915569,	0.0291833019092979,	-0.477424842897478,	1.35779167644369,	-0.542592880902585,	0.0763559743451602,	0.193336647487864,	-0.477424842897478,	0.0945615382726937,	0.0349234472173683,	0.188179824955788,	0.151679952592267,	-0.151679952592265,	-0.035539605612024,	0.0291833019092957,	0.0763559743451622,	0.0349234472173671,	0.0291833019092964,	0.0543982057915581,	-0.542592880902586,	0.094561538272695,	0.0763559743451631,	-0.542592880902587,	1.35779167644369,	-0.477424842897479,	0.0349234472173656,	0.0945615382726962,	-0.477424842897478,	0.193336647487863,	0.18817982495579,	-0.151679952592265,	-0.151679952592267,	-0.00612777611408755,	-0.0161462617219804,	0.0389120218906048,	0.0859820654718776,	0.00181735110191264,	0.0291833019092964,	0.0945615382726967,	-0.61148850986406,	-0.0312440230695058,	0.0763559743451619,	-0.477424842897479,	1.09630480524377,	0.0197900092957946,	0.0389120218906053,	0.134634695056482,	-0.47402237081109,	0.307284054690829,	0.0201477303705683,	-0.173217039552965,	-0.0234903206015876,	0.0197900092957948,	-0.00612777611408804,	0.0323268065828804,	0.0859820654718768,	0.0349234472173674,	-0.0355396056120244,	-0.00612777611408738,	-0.47402237081109,	0.193336647487863,	0.0349234472173674,	0.0197900092957941,	0.535766042624732,	-0.474022370811089,	0.0859820654718763,	-0.0234903206015872,	-0.552747934337448,	-0.338151158712177,	0.338151158712178,	0.0197900092957947,	-0.0312440230695068,	0.00181735110191406,	-0.00612777611408806,	0.0389120218906059,	0.0763559743451613,	0.0291833019092966,	-0.0161462617219804,	0.134634695056481,	-0.477424842897478,	0.0945615382726951,	0.0389120218906059,	-0.474022370811089,	1.09630480524377,	-0.611488509864057,	0.0859820654718762,	0.30728405469083,	0.173217039552963,	0.0201477303705681,	-0.00612777611408744,	0.00181735110191365,	-0.0312440230695065,	0.0197900092957946,	-0.0161462617219806,	0.029183301909297,	0.0763559743451613,	0.0389120218906055,	0.0389120218906047,	0.0945615382726956,	-0.477424842897478,	0.134634695056481,	0.0859820654718774,	-0.611488509864058,	1.09630480524377,	-0.474022370811089,	0.307284054690829,	-0.173217039552964,	0.020147730370569,	0.0323268065828802,	-0.00612777611408758,	0.0197900092957947,	-0.0234903206015878,	-0.00612777611408737,	-0.0355396056120244,	0.0349234472173669,	0.0859820654718775,	0.0197900092957944,	0.0349234472173673,	0.193336647487864,	-0.47402237081109,	-0.0234903206015875,	0.0859820654718769,	-0.47402237081109,	0.535766042624733,	-0.552747934337448,	0.338151158712178,	0.338151158712178};
        //vector<float> a_vector;//矩阵A的值
        for(int i = 0; i<19*19; ++i)
        {
            a[i] = (Dtype) a_vector[i];
        }
       // std::cout << "last element of a = " << a[18*19+18] << std::endl;
   
     //if(global_debug) std::cout<<prefix<<"Finished."<<std::endl;
    
    }
    
    template <typename Dtype>
    void CToParaLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
                                      const vector<Blob<Dtype>*>& top){
//Print Reshape Start
        //string prefix = "\t\tC To Para Layer:: Reshape: \t";
        //std::cout<<prefix<<"Starting!"<<std::endl;
        
        N = bottom[0]->shape(0);//N
        C = bottom[0]->shape(1);//32
        //H = bottom[0]->shape(2);
        //W = bottom[0]->shape(3);
        
        //Reshape output T
        vector<int> shape(2);
        shape[0] = N;
        shape[1] = C + 6;
        top[0]->Reshape(shape);
        
        //Reshpae Full C1(N*38*1*1)
        vector<int> shape_c(2);
        shape_c[0] = N;
        shape_c[1] = C + 6;
        full_C.Reshape(shape_c);
        
        //Reshape different matrix A1
        vector<int> shape_a1(2);
        shape_a1[0] = 19;
        shape_a1[1] =16;
        diff_A1.Reshape(shape_a1);
        
        //if(global_debug) std::cout<<prefix<<"Finished."<<std::endl;
    }

    template <typename Dtype>
    void CToParaLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
                                          const vector<Blob<Dtype>*>& top){
//Print Forward
        //string prefix = "\t\tC To Para Layer:: Forward_cpu: \t";
        //if(global_debug) std::cout<<prefix<<"Starting!"<<std::endl;
        
//Declare the variables
        const Dtype* C = bottom[0]->cpu_data();        
        Dtype* t = top[0]->mutable_cpu_data();
        Dtype* C_Full =full_C.mutable_cpu_data();
        
//initialize mutable data
        //initialize T  
        caffe_set(top[0]->count(), (Dtype)0, t);
        //Compute(initialize) Full C1
        //if(global_debug) std::cout<<prefix<<"Compute Full C1"<<std::endl;
        
        //C_Full = C (in the first 32 data)
        int l = 0;				
	for(int k = 0; k < 2; k++){
		for(int i = 0; i < 16; ++i){
			for(int j = 0; j < N; j++){							    
			    C_Full[full_C.offset(j,i + k*19)] = C[bottom[0]->offset(j,l)];
			}
		l++;
		}
                for(int i = 16; i < 19; ++i){
			for(int j = 0; j < N; j++){							    
			    C_Full[full_C.offset(j,i + k*19)] = (Dtype)0;
			}
		}					
	}
        /*std::cout << "C_Full" << std::endl;
	for(int i = 0; i < 38; ++i){
		std::cout << C_Full[full_C.offset(0,i)] << std::endl;
	}*/

//Compute matrix A (19 * 19)        
        const Dtype* A = constant_a.cpu_data();
        /*std::cout << "Delta_A_inverse data" << std::endl;
        for (int i=0;i<19;i++)
        {
            for (int j=0;j<19;j++)
            {
                 std::cout << A[constant_a.offset(i,j)] << "," ;
            }
            std::cout << std::endl;
        }
        int i = 18,j=18;
        std::cout << "A[" << i+1 << "][" << j+1 << "]=" << A[constant_a.offset(i,j)] << std::endl;*/
//Compute full T= A*C1
        for(int i = 0; i < N; ++i ){
            
            Dtype* T = t + 38 * i;
/*            for (int j = 0;j<2; j++){
                 for(int k = 0;k<19;k++){
                    for(int l=0;l<16;l++){
                         T[j*19+k] += C[bottom[0]->offset(i,j*16+l)]*A[constant_a.offset(k,l)];
                    }
                 }
            }*/
            caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasTrans, 2, 19, 19, (Dtype)1., C_Full + 38 * i, A, (Dtype)0., T);
           /* if(i==0) 
            {
              std::cout << "T= C_Full * A^T" << std::endl;
				for(int i = 0; i < 38; ++i){
					std::cout << T[i] << "," ;
                                        if(i%19 == 18)
                                        {
                                             std::cout << std::endl;
                                        } 
				}
            }*/
        }
        
        //if(global_debug) std::cout<<prefix<<"Finished."<<std::endl;
                                                                                          
    }
    
    
    template <typename Dtype>
    void CToParaLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
                                           const vector<bool>& propagate_down,
                                           const vector<Blob<Dtype>*>& bottom){
//Print Backward
        //string prefix = "\t\tC To Para Layer:: Backward_cpu: \t";
        //if(global_debug) std::cout<<prefix<<"Starting!"<<std::endl;

//Declare variables
	//Dtype*  dTT =top[0]->mutable_cpu_diff();
	//LOG(INFO)<<"start set 0";
	//caffe_set(top[0]->count(), (Dtype)0, dTT);
	//LOG(INFO)<<"done set 0";
        const Dtype* dT = top[0]->cpu_diff();
        Dtype* dc = bottom[0]->mutable_cpu_diff();
        const Dtype* A = constant_a.cpu_data();
        Dtype* A1 = diff_A1.mutable_cpu_data();
		
        
//initialize mutable_cpu_data
        caffe_set(bottom[0]->count(), (Dtype)0, dc);
 	
        
        //Get A1 from A;A1 = 19 * 16
        //std::cout<<prefix<<"compute diff Matrix A1"<<std::endl;
        int k = 0;
        for(int i = 0; i < 16; ++i){
            for(int j = 0; j < 19; j++){
                A1[diff_A1.offset(j,k)] = A[constant_a.offset(j,i)];
            }
      	++k;
        }

//Compute dC	
	for(int i = 0; i < N; ++i){
		for(int k = 0; k < 19; ++k){
			for(int j = 0; j < 16; ++j){			
				//dc[32 * i + j] += dT[38 * i + k ] * A1[16 * k + j];
				dc[32 * i + j] += dT[38 * i + k ] * A[19 * k + j];
				dc[32 * i + j + 16] += dT[38 * i + k + 19 ] * A[19 * k + j];
				//if(i==3)std::cout << "dT[" << k << "]=" << dT[38*i+k] << std::endl;
				//dc[32 * i + j] = dT[38 * i + 22];
				//dc[32 * i + j] = (Dtype)1.;
			}
		}
	}
/*	for(int i = 0; i < N; ++i){
		for(int k = 19; k < 38; ++k){
			for(int j = 16; j < 32; ++j){			
					
				dc[32 * i + j] = (Dtype)0.;			
				//dc[32 * i + j] += dT[38 * i + k ] * A1[16 * (k-19) + (j -16)];
				//dc[32 * i + j] = (Dtype)0.;
			}
		}
	}*/
        //if(global_debug) std::cout<<prefix<<"Finished."<<std::endl;
    }
#ifdef CPU_ONLY
    STUB_GPU(CToParaLayer);
#endif
    
    INSTANTIATE_CLASS(CToParaLayer);
    REGISTER_LAYER_CLASS(CToPara);
}





